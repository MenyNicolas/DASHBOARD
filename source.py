import numpy as np
import pandas as pd
import streamlit as st
import utils
import matplotlib.pyplot as plt
import seaborn as sns

def compute_data():
    dict_couts = utils.load_couts()
    df_combined = utils.load_data()

    # üìå Liste pour stocker les donn√©es avant l'export
    data_list = []

    # üìå Parcourir chaque client
    for client in dict_couts.keys():

        if(client == "HELLOFRESH FRANCE SAS 13"):
            df_client_data = df_combined[(df_combined["CLI"] == "HELLOFRESH FRANCE SAS") & (df_combined["temperature"] == "FRESH 13")]
        elif(client == "HELLOFRESH FRANCE SAS 18"):
            df_client_data = df_combined[(df_combined["CLI"] == "HELLOFRESH FRANCE SAS") & (df_combined["temperature"] == "FRESH 18")]
        else :
            df_client_data = df_combined[df_combined["CLI"] == client]

        # V√©rifier si le client a des donn√©es
        if df_client_data.empty:
            continue

        # üìå Parcourir les temp√©ratures uniques pour ce client
        for temperature in df_client_data["temperature"].unique():
            df_temp_data = df_client_data[df_client_data["temperature"] == temperature]

            # üìå Parcourir les flux uniques pour cette temp√©rature
            for flux in df_temp_data["flux"].unique():
                df_flux_data = df_temp_data[df_temp_data["flux"] == flux]

                # Sommes des quantit√©s
                total_poids = df_flux_data["Poids"].sum()
                total_colis = df_flux_data["Colis"].sum()
                total_xp = df_flux_data["XP"].sum()
                total_ca = df_flux_data["Montant"].sum()

                # R√©cup√©rer les co√ªts unitaires
                df_couts_client = dict_couts[client]

                # V√©rifier si la temp√©rature existe dans le fichier de co√ªts
                if temperature not in df_couts_client.columns:
                    temperature = "FRESH" # CAS SPECIAL POUR HELLOFRESH

                # üìå Calcul des co√ªts effectifs
                couts_collecte = float(df_couts_client.loc[0, temperature]) * total_colis
                couts_tri = float(df_couts_client.loc[1, temperature]) * total_colis
                couts_manut = float(df_couts_client.loc[2, temperature]) * total_colis
                couts_acheminement = float(df_couts_client.loc[3, temperature]) * total_poids
                couts_distribution = float(df_couts_client.loc[4, temperature]) * total_xp
                couts_pickup_colis = float(df_couts_client.loc[5, temperature]) * total_colis
                couts_pickup_kg = float(df_couts_client.loc[6, temperature]) * total_poids
                couts_support = float(df_couts_client.loc[7, temperature]) * total_colis
                couts_branding = float(df_couts_client.loc[8, temperature]) * total_colis
                couts_carboglace = float(df_couts_client.loc[9, temperature]) * total_colis

                # üìå Ajustement des co√ªts en fonction du flux
                if flux == "NR":
                    couts_acheminement *= 0.75
                elif flux == "ND":
                    couts_acheminement = 0

                # üìå Calcul du co√ªt total
                cout_total = (
                    couts_collecte + couts_tri + couts_manut + couts_acheminement + 
                    couts_distribution + couts_pickup_colis + couts_pickup_kg + 
                    couts_support + couts_branding + couts_carboglace
                )

                # üìå Ajouter les donn√©es √† la liste
                data_list.append([
                    client, temperature, flux, total_poids, total_colis, total_xp, total_ca,
                    couts_collecte, couts_tri, couts_manut, couts_acheminement, couts_distribution,
                    couts_pickup_colis, couts_pickup_kg, couts_support, couts_branding, couts_carboglace,
                    cout_total
                ])

    # üìå Cr√©ation du DataFrame final
    df_result = pd.DataFrame(data_list, columns=[
        "Client", "Temp√©rature", "Flux", "Total Poids", "Total Colis", "Total XP", "CA Total",
        "Co√ªt Collecte", "Co√ªt Tri", "Co√ªt Manutention", "Co√ªt Acheminement", "Co√ªt Distribution",
        "Co√ªt Pickup Colis", "Co√ªt Pickup KG", "Co√ªt Support", "Co√ªt Branding", "Co√ªt Carboglace",
        "Co√ªt Total"
    ])

    return df_result

def main():
    df = compute_data()

    # üìå Interface utilisateur - S√©lection du niveau de d√©tail
    st.title("üîç Analyse des Co√ªts et Rentabilit√©")

    niveau_detail = st.radio(
        "üìä S√©lectionnez la vue souhait√©e :", 
        ["Globale", "Par Client", "Par temp√©rature et flux"]
    )

    # üìå Fonction pour g√©n√©rer le graphique Marge + MCV
    def plot_marge_mcv(df_data, x_col, title):
        fig, ax1 = plt.subplots(figsize=(10, 5))

        # üìå Graphique √† barres pour la Marge (‚Ç¨)
        ax1 = sns.barplot(x=x_col, y="Marge", data=df_data, color="royalblue", ax=ax1, label="Marge (‚Ç¨)")

        # üìå Ajouter une deuxi√®me √©chelle Y pour MCV (%)
        ax2 = ax1.twinx()
        ax2 = sns.lineplot(x=x_col, y="MCV (%)", data=df_data, color="red", marker="o", linewidth=2, ax=ax2, label="MCV (%)")

        # üìå Titres et labels
        ax1.set_ylabel("Marge (‚Ç¨)", color="royalblue")
        ax2.set_ylabel("MCV (%)", color="red")
        ax1.set_xlabel(x_col)
        plt.title(title)

        # üìå Rotation des labels X pour meilleure lisibilit√©
        ax1.set_xticklabels(df_data[x_col], rotation=45, ha="right")

        # üìå Ajouter les l√©gendes
        ax1.legend(loc="upper left")
        ax2.legend(loc="upper right")

        return fig

    # üìå Vue Globale (par Client)
    if niveau_detail == "Globale":
        df_global = df.groupby("Client").sum().reset_index()
        df_global["Marge"] = df_global["CA Total"] - df_global["Co√ªt Total"]
        df_global["MCV (%)"] = (df_global["Marge"] / df_global["CA Total"]) * 100

        st.write("### üìà Vue Globale des Co√ªts et Marges par Client")
        st.dataframe(df_global[["Client", "CA Total", "Co√ªt Total", "Marge", "MCV (%)"]])

        # üìå Affichage du graphique Marge & MCV
        st.pyplot(plot_marge_mcv(df_global, "Client", "Marge et MCV par Client"))

    # üìå Vue par Temp√©rature
    elif niveau_detail == "Par Client":
        client_selectionne = st.selectbox("S√©lectionnez un client :", df["Client"].unique())
        df_client = df[df["Client"] == client_selectionne]

        df_temp = df_client.groupby("Temp√©rature").sum().reset_index()
        df_temp["Marge"] = df_temp["CA Total"] - df_temp["Co√ªt Total"]
        df_temp["MCV (%)"] = (df_temp["Marge"] / df_temp["CA Total"]) * 100

        st.write(f"### üìä Vue par Temp√©rature - {client_selectionne}")
        st.dataframe(df_temp[["Temp√©rature", "CA Total", "Co√ªt Total", "Marge", "MCV (%)"]])

        # üìå Affichage du graphique Marge & MCV
        st.pyplot(plot_marge_mcv(df_temp, "Temp√©rature", f"Marge et MCV par Temp√©rature ({client_selectionne})"))

    # üìå Vue par Flux
    elif niveau_detail == "Par temp√©rature et flux":
        client_selectionne = st.selectbox("S√©lectionnez un client :", df["Client"].unique())
        df_client = df[df["Client"] == client_selectionne]

        temperature_selectionnee = st.selectbox("S√©lectionnez une temp√©rature :", df_client["Temp√©rature"].unique())
        df_temp = df_client[df_client["Temp√©rature"] == temperature_selectionnee]

        flux_selectionne = st.selectbox("S√©lectionnez un flux :", df_temp["Flux"].unique())
        df_filtre = df_temp[df_temp["Flux"] == flux_selectionne]

        if df_filtre.empty:
            st.error("‚ö†Ô∏è Aucune donn√©e disponible pour cette combinaison.")
        else:
            total_ca = df_filtre["CA Total"].values[0]
            total_cout = df_filtre["Co√ªt Total"].values[0]

            # üìå Calcul des indicateurs financiers
            marge_brute = total_ca - total_cout
            mcv = (marge_brute / total_ca) * 100 if total_ca > 0 else 0

            st.subheader(f"üìä D√©tails pour {client_selectionne} - {temperature_selectionnee} - {flux_selectionne}")
            st.metric(label="Chiffre d'Affaires (CA)", value=f"{total_ca:,.2f} ‚Ç¨")
            st.metric(label="Co√ªt Total", value=f"{total_cout:,.2f} ‚Ç¨")
            st.metric(label="Marge Brute", value=f"{marge_brute:,.2f} ‚Ç¨")
            st.metric(label="MCV (%)", value=f"{mcv:.2f} %")

            # üìå Affichage des co√ªts d√©taill√©s
            colonnes_couts = [
                "Co√ªt Collecte", "Co√ªt Tri", "Co√ªt Manutention", "Co√ªt Acheminement", "Co√ªt Distribution",
                "Co√ªt Pickup Colis", "Co√ªt Pickup KG", "Co√ªt Support", "Co√ªt Branding", "Co√ªt Carboglace"
            ]

            df_couts = df_filtre[["Client", "Temp√©rature", "Flux"] + colonnes_couts].T
            df_couts.columns = ["Valeur (‚Ç¨)"]
            df_couts = df_couts.iloc[3:]  # Retirer les premi√®res lignes d'infos
            st.write("### üìù D√©tail des co√ªts")
            st.dataframe(df_couts)

            # üìå Graphique des co√ªts d√©taill√©s
            st.write("### üìä R√©partition des co√ªts")
            fig, ax = plt.subplots(figsize=(10, 5))
            sns.barplot(x=df_couts.index, y=df_couts["Valeur (‚Ç¨)"], palette="coolwarm", ax=ax)
            ax.set_title(f"R√©partition des co√ªts pour {client_selectionne} ({temperature_selectionnee}, {flux_selectionne})")
            ax.set_ylabel("Co√ªt (‚Ç¨)")
            ax.set_xlabel("Type de co√ªt")
            plt.xticks(rotation=45, ha="right")
            
            st.pyplot(fig)

if __name__ == "__main__":
    main()